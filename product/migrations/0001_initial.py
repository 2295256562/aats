# Generated by Django 2.1.14 on 2020-03-13 13:54

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DjangoCeleryBeatClockedschedule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clocked_time', models.DateTimeField()),
                ('enabled', models.IntegerField()),
            ],
            options={
                'db_table': 'django_celery_beat_clockedschedule',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoCeleryBeatCrontabschedule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('minute', models.CharField(max_length=240)),
                ('hour', models.CharField(max_length=96)),
                ('day_of_week', models.CharField(max_length=64)),
                ('day_of_month', models.CharField(max_length=124)),
                ('month_of_year', models.CharField(max_length=64)),
                ('timezone', models.CharField(max_length=63)),
            ],
            options={
                'db_table': 'django_celery_beat_crontabschedule',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoCeleryBeatIntervalschedule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('every', models.IntegerField()),
                ('period', models.CharField(max_length=24)),
            ],
            options={
                'db_table': 'django_celery_beat_intervalschedule',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoCeleryBeatPeriodictask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('task', models.CharField(max_length=200)),
                ('args', models.TextField()),
                ('kwargs', models.TextField()),
                ('queue', models.CharField(blank=True, max_length=200, null=True)),
                ('exchange', models.CharField(blank=True, max_length=200, null=True)),
                ('routing_key', models.CharField(blank=True, max_length=200, null=True)),
                ('expires', models.DateTimeField(blank=True, null=True)),
                ('enabled', models.IntegerField()),
                ('last_run_at', models.DateTimeField(blank=True, null=True)),
                ('total_run_count', models.PositiveIntegerField()),
                ('date_changed', models.DateTimeField()),
                ('description', models.TextField()),
                ('one_off', models.IntegerField()),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('priority', models.PositiveIntegerField(blank=True, null=True)),
                ('headers', models.TextField()),
                ('expire_seconds', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'django_celery_beat_periodictask',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoCeleryBeatPeriodictasks',
            fields=[
                ('ident', models.SmallIntegerField(primary_key=True, serialize=False)),
                ('last_update', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_celery_beat_periodictasks',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoCeleryBeatSolarschedule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event', models.CharField(max_length=24)),
                ('latitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('longitude', models.DecimalField(decimal_places=6, max_digits=9)),
            ],
            options={
                'db_table': 'django_celery_beat_solarschedule',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ApiCase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_user', models.CharField(max_length=32, verbose_name='创建人')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('is_deleted', models.BooleanField(default=False)),
                ('case_name', models.CharField(max_length=128, verbose_name='用例名称')),
                ('model', models.CharField(max_length=64, verbose_name='所属模块')),
                ('method', models.CharField(max_length=2, verbose_name='请求方式')),
                ('url', models.CharField(max_length=1024, verbose_name='接口地址')),
                ('type', models.IntegerField(verbose_name='参数类型')),
                ('params', models.TextField(verbose_name='请求参数')),
                ('checkType', models.CharField(max_length=32, verbose_name='校验类型')),
                ('checkText', models.TextField(verbose_name='校验值')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
            ],
            options={
                'verbose_name': '接口用例表',
                'verbose_name_plural': '接口用例表',
                'db_table': 'apicase',
            },
        ),
        migrations.CreateModel(
            name='ApiILog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_user', models.CharField(max_length=32, verbose_name='创建人')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('is_deleted', models.BooleanField(default=False)),
                ('caseId', models.IntegerField(verbose_name='用例id')),
                ('caseUrl', models.TextField(verbose_name='接口url')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Headers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_user', models.CharField(max_length=32, verbose_name='创建人')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('is_deleted', models.BooleanField(default=False)),
                ('headers', models.TextField(blank=True, null=True, verbose_name='请求头')),
                ('project_name', models.CharField(max_length=64, verbose_name='项目名称')),
            ],
            options={
                'verbose_name': '项目表',
                'verbose_name_plural': '项目表',
                'db_table': 'headers',
            },
        ),
        migrations.CreateModel(
            name='Model',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_user', models.CharField(max_length=32, verbose_name='创建人')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('is_deleted', models.BooleanField(default=False)),
                ('model_name', models.CharField(max_length=64, verbose_name='模块名称')),
            ],
            options={
                'verbose_name': '模块表',
                'verbose_name_plural': '模块表',
                'db_table': 'model',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_user', models.CharField(max_length=32, verbose_name='创建人')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('is_deleted', models.BooleanField(default=False)),
                ('project_name', models.CharField(max_length=64, verbose_name='项目名称')),
                ('project_address', models.CharField(max_length=1024, verbose_name='项目地址')),
            ],
            options={
                'verbose_name': '项目表',
                'verbose_name_plural': '项目表',
                'db_table': 'project',
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_user', models.CharField(max_length=32, verbose_name='创建人')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('is_deleted', models.BooleanField(default=False)),
                ('R_Number', models.CharField(max_length=64, verbose_name='任务编号')),
                ('R_Env', models.CharField(max_length=128, verbose_name='执行环境')),
                ('R_project', models.CharField(max_length=10, verbose_name='所属项目')),
                ('R_CaseId', models.CharField(max_length=1024, verbose_name='报告用例id')),
                ('R_Status', models.IntegerField(choices=[(1, '未开始'), (2, '进行中'), (3, '已完成')], default=1, verbose_name='任务状态')),
                ('R_CaseSum', models.IntegerField(verbose_name='任务用例个数')),
                ('R_CasePass', models.IntegerField(blank=True, null=True, verbose_name='成功数')),
                ('R_CaseFail', models.IntegerField(blank=True, null=True, verbose_name='失败数')),
                ('R_StartTime', models.CharField(blank=True, max_length=200, null=True, verbose_name='任务起始时间')),
                ('R_EndTime', models.CharField(blank=True, max_length=200, null=True, verbose_name='任务结束时间')),
            ],
            options={
                'verbose_name': '接口报告表',
                'verbose_name_plural': '接口报告表',
                'db_table': 'report',
            },
        ),
        migrations.AddField(
            model_name='model',
            name='project_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='product.Project', verbose_name='项目id'),
        ),
        migrations.AddField(
            model_name='headers',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='product.Project', verbose_name='所属项目'),
        ),
        migrations.AddField(
            model_name='apicase',
            name='project_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='product.Project', verbose_name='所属项目id'),
        ),
    ]
